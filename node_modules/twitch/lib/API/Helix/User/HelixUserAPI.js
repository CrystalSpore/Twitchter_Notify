"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseAPI_1 = require("../../BaseAPI");
var HelixUser_1 = require("./HelixUser");
var HelixPrivilegedUser_1 = require("./HelixPrivilegedUser");
var UserTools_1 = require("../../../Toolkit/UserTools");
var HelixFollow_1 = require("./HelixFollow");
var HelixUserAPI = /** @class */ (function (_super) {
    __extends(HelixUserAPI, _super);
    function HelixUserAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HelixUserAPI.prototype.getUsers = function (lookupType, param) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var query, result, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        query = (_a = {}, _a[lookupType] = param, _a);
                        return [4 /*yield*/, this._client.apiCall({
                                type: 'helix',
                                url: 'users',
                                query: query
                            })];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.data.map(function (userData) { return new HelixUser_1.default(userData, _this._client); })];
                }
            });
        });
    };
    HelixUserAPI.prototype.getUsersByIds = function (users) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUsers('id', users.map(function (id) { return UserTools_1.default.getUserId(id); }))];
            });
        });
    };
    HelixUserAPI.prototype.getUsersByNames = function (users) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUsers('login', users.map(function (name) { return UserTools_1.default.getUserName(name); }))];
            });
        });
    };
    HelixUserAPI.prototype.getUserById = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUsers('id', UserTools_1.default.getUserId(user))];
                    case 1:
                        users = _a.sent();
                        if (!users.length) {
                            throw new Error('user not found');
                        }
                        return [2 /*return*/, users[0]];
                }
            });
        });
    };
    HelixUserAPI.prototype.getUserByName = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUsers('login', UserTools_1.default.getUserName(user))];
                    case 1:
                        users = _a.sent();
                        if (!users.length) {
                            throw new Error('user not found');
                        }
                        return [2 /*return*/, users[0]];
                }
            });
        });
    };
    HelixUserAPI.prototype.getMe = function (withEmail) {
        if (withEmail === void 0) { withEmail = false; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.apiCall({
                            type: 'helix',
                            url: 'users',
                            scope: withEmail ? 'user:read:email' : ''
                        })];
                    case 1:
                        result = _a.sent();
                        if (!result.data || !result.data.length) {
                            throw new Error('could not get authenticated user');
                        }
                        return [2 /*return*/, new HelixPrivilegedUser_1.default(result.data[0], this._client)];
                }
            });
        });
    };
    HelixUserAPI.prototype.updateUser = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.apiCall({
                            type: 'helix',
                            url: 'users',
                            method: 'PUT',
                            query: {
                                description: data.description
                            }
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixPrivilegedUser_1.default(result.data[0], this._client)];
                }
            });
        });
    };
    HelixUserAPI.prototype.getFollows = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var query, hasUserIdParam, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {
                            after: filter.after,
                            before: filter.before,
                            first: filter.limit
                        };
                        hasUserIdParam = false;
                        if (filter.user) {
                            query.from_id = UserTools_1.default.getUserId(filter.user);
                            hasUserIdParam = true;
                        }
                        if (filter.followedUser) {
                            query.to_id = UserTools_1.default.getUserId(filter.followedUser);
                            hasUserIdParam = true;
                        }
                        if (!hasUserIdParam) {
                            throw new TypeError('Either from, to or both have to be set');
                        }
                        return [4 /*yield*/, this._client.apiCall({
                                type: 'helix',
                                url: 'users/follows',
                                query: query
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (follow) { return new HelixFollow_1.default(follow, _this._client); })];
                }
            });
        });
    };
    return HelixUserAPI;
}(BaseAPI_1.default));
exports.default = HelixUserAPI;
//# sourceMappingURL=HelixUserAPI.js.map