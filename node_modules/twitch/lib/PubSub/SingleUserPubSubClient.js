"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var PubSubClient_1 = require("./PubSubClient");
var Decorators_1 = require("../Toolkit/Decorators");
var PubSubListener_1 = require("./PubSubListener");
var PubSubBitsMessage_1 = require("./Messages/PubSubBitsMessage");
var PubSubSubscriptionMessage_1 = require("./Messages/PubSubSubscriptionMessage");
var PubSubCommerceMessage_1 = require("./Messages/PubSubCommerceMessage");
var PubSubWhisperMessage_1 = require("./Messages/PubSubWhisperMessage");
var RefreshableAuthProvider_1 = require("../Auth/RefreshableAuthProvider");
var SingleUserPubSubClient = /** @class */ (function () {
    function SingleUserPubSubClient(twitchClient, pubSubClient) {
        var _this = this;
        this._listeners = new Map;
        this._twitchClient = twitchClient;
        this._pubSubClient = pubSubClient || new PubSubClient_1.default();
        this._pubSubClient.onMessage(function (topic, messageData) {
            var type = topic.split('.')[0];
            if (_this._listeners.has(type)) {
                var message_1;
                switch (type) {
                    case 'channel-bits-events-v1': {
                        message_1 = new PubSubBitsMessage_1.default(messageData, _this._twitchClient);
                        break;
                    }
                    case 'channel-subscribe-events-v1': {
                        message_1 = new PubSubSubscriptionMessage_1.default(messageData, _this._twitchClient);
                        break;
                    }
                    case 'channel-commerce-events-v1': {
                        message_1 = new PubSubCommerceMessage_1.default(messageData, _this._twitchClient);
                        break;
                    }
                    case 'whispers': {
                        message_1 = new PubSubWhisperMessage_1.default(messageData, _this._twitchClient);
                        break;
                    }
                    default: return;
                }
                _this._listeners.get(type).forEach(function (l) { return l.call(message_1); });
            }
        });
    }
    SingleUserPubSubClient.prototype._getUserData = function (scope) {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken, tokenInfo, userId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._twitchClient._config.authProvider.getAccessToken(scope)];
                    case 1:
                        accessToken = _a.sent();
                        return [4 /*yield*/, this._twitchClient.getTokenInfo()];
                    case 2:
                        tokenInfo = _a.sent();
                        if (!(!tokenInfo.valid && this._twitchClient._config.authProvider instanceof RefreshableAuthProvider_1.default)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._twitchClient._config.authProvider.refresh()];
                    case 3:
                        accessToken = (_a.sent()).accessToken;
                        return [4 /*yield*/, this._twitchClient.getTokenInfo()];
                    case 4:
                        tokenInfo = _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!tokenInfo.valid) {
                            throw new Error('PubSub authentication failed');
                        }
                        userId = tokenInfo.userId;
                        return [2 /*return*/, { userId: userId, accessToken: accessToken }];
                }
            });
        });
    };
    SingleUserPubSubClient.prototype._addListener = function (type, callback, scope) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, userId, accessToken, listener;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._pubSubClient.connect()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this._getUserData(scope)];
                    case 2:
                        _a = _b.sent(), userId = _a.userId, accessToken = _a.accessToken;
                        listener = new PubSubListener_1.PubSubListener(type, userId, callback, this);
                        if (!this._listeners.has(type)) return [3 /*break*/, 3];
                        this._listeners.get(type).push(listener);
                        return [3 /*break*/, 5];
                    case 3:
                        this._listeners.set(type, [listener]);
                        return [4 /*yield*/, this._pubSubClient.listen(type + "." + userId, accessToken)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5: return [2 /*return*/, listener];
                }
            });
        });
    };
    SingleUserPubSubClient.prototype.addBitsListener = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-bits-events-v1', callback)];
            });
        });
    };
    SingleUserPubSubClient.prototype.addSubListener = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-subscribe-events-v1', callback, 'channel_subscriptions')];
            });
        });
    };
    SingleUserPubSubClient.prototype.addCommerceListener = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-commerce-events-v1', callback)];
            });
        });
    };
    SingleUserPubSubClient.prototype.addWhisperListener = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('whispers', callback, 'chat_login')];
            });
        });
    };
    SingleUserPubSubClient.prototype.removeListener = function (listener) {
        if (this._listeners.has(listener.type)) {
            var newListeners = this._listeners.get(listener.type).filter(function (l) { return l !== listener; });
            if (newListeners.length === 0) {
                this._listeners.delete(listener.type);
                // tslint:disable-next-line:no-floating-promises
                this._pubSubClient.unlisten(listener.type + "." + listener.userId);
            }
            else {
                this._listeners.set(listener.type, newListeners);
            }
        }
    };
    __decorate([
        Decorators_1.NonEnumerable
    ], SingleUserPubSubClient.prototype, "_twitchClient", void 0);
    __decorate([
        Decorators_1.NonEnumerable
    ], SingleUserPubSubClient.prototype, "_pubSubClient", void 0);
    return SingleUserPubSubClient;
}());
exports.default = SingleUserPubSubClient;
//# sourceMappingURL=SingleUserPubSubClient.js.map