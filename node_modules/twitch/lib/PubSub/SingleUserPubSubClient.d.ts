import PubSubClient from './PubSubClient';
import Twitch from '../';
import { PubSubListener } from './PubSubListener';
import PubSubBitsMessage from './Messages/PubSubBitsMessage';
import PubSubSubscriptionMessage from './Messages/PubSubSubscriptionMessage';
import PubSubCommerceMessage from './Messages/PubSubCommerceMessage';
import PubSubWhisperMessage from './Messages/PubSubWhisperMessage';
export default class SingleUserPubSubClient {
    private readonly _twitchClient;
    private readonly _pubSubClient;
    private readonly _listeners;
    constructor(twitchClient: Twitch, pubSubClient?: PubSubClient);
    private _getUserData(scope?);
    private _addListener<T>(type, callback, scope?);
    addBitsListener(callback: (message: PubSubBitsMessage) => void): Promise<PubSubListener<PubSubBitsMessage>>;
    addSubListener(callback: (message: PubSubSubscriptionMessage) => void): Promise<PubSubListener<PubSubSubscriptionMessage>>;
    addCommerceListener(callback: (message: PubSubCommerceMessage) => void): Promise<PubSubListener<PubSubCommerceMessage>>;
    addWhisperListener(callback: (message: PubSubWhisperMessage) => void): Promise<PubSubListener<PubSubWhisperMessage>>;
    removeListener(listener: PubSubListener): void;
}
