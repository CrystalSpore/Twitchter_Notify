"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Decorators_1 = require("../../Toolkit/Decorators");
var BaseAPI_1 = require("../BaseAPI");
var PrivilegedUser_1 = require("./PrivilegedUser");
var _1 = require("./");
var ObjectTools_1 = require("../../Toolkit/ObjectTools");
var UserTools_1 = require("../../Toolkit/UserTools");
var EmoteSetList_1 = require("../Channel/EmoteSetList");
var UserSubscription_1 = require("./UserSubscription");
var errors_1 = require("request-promise-native/errors");
var NotSubscribed_1 = require("../NotSubscribed");
var NoSubscriptionProgram_1 = require("../NoSubscriptionProgram");
var UserFollow_1 = require("./UserFollow");
var NotFollowing_1 = require("../NotFollowing");
var UserBlock_1 = require("./UserBlock");
var UserAPI = /** @class */ (function (_super) {
    __extends(UserAPI, _super);
    function UserAPI() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._userByNameCache = new Map;
        return _this;
    }
    UserAPI.prototype.getMe = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = PrivilegedUser_1.default.bind;
                        return [4 /*yield*/, this._client.apiCall({ url: 'user', scope: 'user_read' })];
                    case 1: return [2 /*return*/, new (_a.apply(PrivilegedUser_1.default, [void 0, _b.sent(), this._client]))()];
                }
            });
        });
    };
    UserAPI.prototype.getUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = _1.default.bind;
                        return [4 /*yield*/, this._client.apiCall({ url: "users/" + UserTools_1.default.getUserId(user) })];
                    case 1: return [2 /*return*/, new (_a.apply(_1.default, [void 0, _b.sent(), this._client]))()];
                }
            });
        });
    };
    // not using the decorator's cache here as users-by-name is slightly more complex to cache
    UserAPI.prototype.getUserByName = function (userName) {
        return __awaiter(this, void 0, void 0, function () {
            var users, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._cleanUserCache();
                        if (this._userByNameCache.has(userName)) {
                            return [2 /*return*/, this._userByNameCache.get(userName).value];
                        }
                        return [4 /*yield*/, this._client.apiCall({ url: 'users', query: { login: userName } })];
                    case 1:
                        users = (_a.sent()).users;
                        if (users.length === 0) {
                            throw new Error('user not found');
                        }
                        user = new _1.default(users[0], this._client);
                        this._userByNameCache.set(userName, {
                            value: user,
                            expires: Date.now() + 3600 * 1000
                        });
                        return [2 /*return*/, user];
                }
            });
        });
    };
    UserAPI.prototype.getUsersByNames = function (userNames) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var cachedEntries, cachedObject, cachedUsers, toFetch, usersData, usersArr, users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._cleanUserCache();
                        userNames = userNames.map(function (name) { return name.toLowerCase(); });
                        cachedEntries = Array.from(this._userByNameCache.entries()).filter(function (_a) {
                            var key = _a[0];
                            return userNames.includes(key);
                        });
                        cachedObject = ObjectTools_1.default.entriesToObject(cachedEntries);
                        cachedUsers = ObjectTools_1.default.map(cachedObject, function (entry) { return entry.value; });
                        toFetch = userNames.filter(function (name) { return !(name in cachedUsers); });
                        if (!toFetch.length) {
                            return [2 /*return*/, cachedUsers];
                        }
                        return [4 /*yield*/, this._client.apiCall({ url: 'users', query: { login: toFetch.join(',') } })];
                    case 1:
                        usersData = _a.sent();
                        usersArr = usersData.users.map(function (data) { return new _1.default(data, _this._client); });
                        usersArr.forEach(function (user) { return _this._userByNameCache.set(user.name, {
                            value: user,
                            expires: Date.now() + 3600 * 1000
                        }); });
                        users = ObjectTools_1.default.indexBy(usersArr, 'userName');
                        return [2 /*return*/, __assign({}, cachedUsers, users)];
                }
            });
        });
    };
    UserAPI.prototype.getUserEmotes = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, tokenInfo, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!user) return [3 /*break*/, 1];
                        userId = UserTools_1.default.getUserId(user);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this._client.getTokenInfo()];
                    case 2:
                        tokenInfo = _a.sent();
                        if (!tokenInfo.valid) {
                            throw new Error('authorization necessary to get emotes');
                        }
                        userId = tokenInfo.userId;
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this._client.apiCall({ url: "users/" + userId + "/emotes", scope: 'user_subscriptions' })];
                    case 4:
                        data = _a.sent();
                        return [2 /*return*/, new EmoteSetList_1.default(data.emoticon_sets)];
                }
            });
        });
    };
    UserAPI.prototype.getSubscriptionData = function (user, toChannel) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, channelId, _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        channelId = UserTools_1.default.getUserId(toChannel);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = UserSubscription_1.default.bind;
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/subscriptions/" + channelId,
                                scope: 'user_subscriptions'
                            })];
                    case 2: return [2 /*return*/, new (_a.apply(UserSubscription_1.default, [void 0, _b.sent(),
                            this._client]))()];
                    case 3:
                        e_1 = _b.sent();
                        if (e_1 instanceof errors_1.StatusCodeError) {
                            if (e_1.statusCode === 404) {
                                throw new NotSubscribed_1.default(channelId, userId);
                            }
                            else if (e_1.statusCode === 422) {
                                throw new NoSubscriptionProgram_1.default(channelId);
                            }
                        }
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    UserAPI.prototype.getFollowedChannels = function (user, page, limit, orderBy, orderDirection) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var userId, query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        query = {};
                        if (page) {
                            query.offset = ((page - 1) * (limit || 25)).toString();
                        }
                        if (limit) {
                            query.limit = limit.toString();
                        }
                        if (orderBy) {
                            query.sortby = orderBy;
                        }
                        if (orderDirection) {
                            query.direction = orderDirection;
                        }
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/follows/channels", query: query
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.follows.map(function (follow) { return new UserFollow_1.default(follow, _this._client); })];
                }
            });
        });
    };
    UserAPI.prototype.getFollowedChannel = function (user, channel) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, channelId, data, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        channelId = UserTools_1.default.getUserId(channel);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._client.apiCall({ url: "users/" + userId + "/follows/channels/" + channelId })];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, new UserFollow_1.default(data, this._client)];
                    case 3:
                        e_2 = _a.sent();
                        if (e_2 instanceof errors_1.StatusCodeError) {
                            if (e_2.statusCode === 404) {
                                throw new NotFollowing_1.default(channelId, userId);
                            }
                        }
                        throw e_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    UserAPI.prototype.followChannel = function (user, channel, notifications) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, channelId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        channelId = UserTools_1.default.getUserId(channel);
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/follows/channels/" + channelId,
                                method: 'PUT',
                                scope: 'user_follows_edit',
                                body: { notifications: Boolean(notifications).toString() }
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new UserFollow_1.default(data, this._client)];
                }
            });
        });
    };
    UserAPI.prototype.unfollowChannel = function (user, channel) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, channelId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        channelId = UserTools_1.default.getUserId(channel);
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/follows/channels/" + channelId,
                                scope: 'user_follows_edit',
                                method: 'DELETE'
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    UserAPI.prototype.getBlockedUsers = function (user, page, limit) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var userId, query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        query = {};
                        if (page) {
                            query.offset = ((page - 1) * (limit || 25)).toString();
                        }
                        if (limit) {
                            query.limit = limit.toString();
                        }
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/blocks", query: query, scope: 'user_blocks_read'
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.blocks.map(function (block) { return new UserBlock_1.default(block, _this._client); })];
                }
            });
        });
    };
    UserAPI.prototype.blockUser = function (user, userToBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, userIdToBlock, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        userIdToBlock = UserTools_1.default.getUserId(userToBlock);
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/blocks/" + userIdToBlock,
                                method: 'PUT',
                                scope: 'user_blocks_edit'
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new UserBlock_1.default(data, this._client)];
                }
            });
        });
    };
    UserAPI.prototype.unblockUser = function (user, userToUnblock) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, userIdToUnblock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = UserTools_1.default.getUserId(user);
                        userIdToUnblock = UserTools_1.default.getUserId(userToUnblock);
                        return [4 /*yield*/, this._client.apiCall({
                                url: "users/" + userId + "/blocks/" + userIdToUnblock,
                                method: 'DELETE',
                                scope: 'user_blocks_edit'
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    UserAPI.prototype._cleanUserCache = function () {
        var _this = this;
        var now = Date.now();
        this._userByNameCache.forEach(function (val, key) {
            if (val.expires < now) {
                _this._userByNameCache.delete(key);
            }
        });
    };
    __decorate([
        Decorators_1.Cached(3600)
    ], UserAPI.prototype, "getMe", null);
    __decorate([
        Decorators_1.Cached(3600)
    ], UserAPI.prototype, "getUser", null);
    __decorate([
        Decorators_1.Cached(3600)
    ], UserAPI.prototype, "getUserEmotes", null);
    __decorate([
        Decorators_1.Cached(3600)
    ], UserAPI.prototype, "getSubscriptionData", null);
    __decorate([
        Decorators_1.Cached(300)
    ], UserAPI.prototype, "getFollowedChannels", null);
    __decorate([
        Decorators_1.Cached(300)
    ], UserAPI.prototype, "getFollowedChannel", null);
    __decorate([
        Decorators_1.ClearsCache('getFollowedChannels', 1),
        Decorators_1.ClearsCache('getFollowedChannel', 2)
    ], UserAPI.prototype, "followChannel", null);
    __decorate([
        Decorators_1.ClearsCache('getFollowedChannels', 1),
        Decorators_1.ClearsCache('getFollowedChannel', 2)
    ], UserAPI.prototype, "unfollowChannel", null);
    __decorate([
        Decorators_1.Cached(3600)
    ], UserAPI.prototype, "getBlockedUsers", null);
    __decorate([
        Decorators_1.ClearsCache('getBlockedUsers', 1)
    ], UserAPI.prototype, "blockUser", null);
    __decorate([
        Decorators_1.ClearsCache('getBlockedUsers', 1)
    ], UserAPI.prototype, "unblockUser", null);
    UserAPI = __decorate([
        Decorators_1.Cacheable
    ], UserAPI);
    return UserAPI;
}(BaseAPI_1.default));
exports.default = UserAPI;
//# sourceMappingURL=UserAPI.js.map