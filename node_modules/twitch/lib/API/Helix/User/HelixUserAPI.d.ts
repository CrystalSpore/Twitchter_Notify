import BaseAPI from '../../BaseAPI';
import HelixUser from './HelixUser';
import HelixPrivilegedUser from './HelixPrivilegedUser';
import { UserIdResolvable, UserNameResolvable } from '../../../Toolkit/UserTools';
import HelixFollow, { HelixFollowFilter } from './HelixFollow';
export interface HelixUserUpdate {
    description?: string;
}
export default class HelixUserAPI extends BaseAPI {
    private getUsers(lookupType, param);
    getUsersByIds(users: UserIdResolvable[]): Promise<HelixUser[]>;
    getUsersByNames(users: UserNameResolvable[]): Promise<HelixUser[]>;
    getUserById(user: UserIdResolvable): Promise<HelixUser>;
    getUserByName(user: UserNameResolvable): Promise<HelixUser>;
    getMe(withEmail?: boolean): Promise<HelixPrivilegedUser>;
    updateUser(data: HelixUserUpdate): Promise<HelixPrivilegedUser>;
    getFollows(filter: HelixFollowFilter): Promise<HelixFollow[]>;
}
