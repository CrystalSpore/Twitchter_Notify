"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocket = require("universal-websocket-client");
var randomstring = require("randomstring");
var TypedEventEmitter_1 = require("ircv3/lib/TypedEventEmitter");
var PubSubClient = /** @class */ (function (_super) {
    __extends(PubSubClient, _super);
    function PubSubClient() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._connecting = false;
        _this._connected = false;
        _this._manualDisconnect = false;
        _this._initialConnect = false;
        _this._onPong = _this.registerEvent();
        _this._onResponse = _this.registerEvent();
        _this.onMessage = _this.registerEvent();
        return _this;
    }
    PubSubClient.prototype.listen = function (topics, authToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (typeof topics === 'string') {
                    topics = [topics];
                }
                return [2 /*return*/, this._sendNonced({
                        type: 'LISTEN',
                        data: {
                            topics: topics,
                            auth_token: authToken
                        }
                    })];
            });
        });
    };
    PubSubClient.prototype.unlisten = function (topics) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (typeof topics === 'string') {
                    topics = [topics];
                }
                return [2 /*return*/, this._sendNonced({
                        type: 'UNLISTEN',
                        data: {
                            topics: topics
                        }
                    })];
            });
        });
    };
    PubSubClient.prototype._sendNonced = function (packet) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var nonce = randomstring.generate(16);
                        _this._onResponse(function (recvNonce, error) {
                            if (recvNonce === nonce) {
                                if (error) {
                                    reject(new Error("Error sending nonced " + packet.type + " packet: " + error));
                                }
                                else {
                                    resolve();
                                }
                            }
                        });
                        packet.nonce = nonce;
                        _this._sendPacket(packet);
                    })];
            });
        });
    };
    PubSubClient.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (_this._connected) {
                            resolve();
                            return;
                        }
                        _this._connecting = true;
                        _this._initialConnect = true;
                        _this._socket = new WebSocket('wss://pubsub-edge.twitch.tv');
                        _this._socket.on('open', function () {
                            _this._connected = true;
                            _this._connecting = false;
                            _this._initialConnect = false;
                            _this._retryDelayGenerator = undefined;
                            _this._startPingCheckTimer();
                            resolve();
                        });
                        _this._socket.onmessage = function (_a) {
                            var data = _a.data;
                            _this._receiveMessage(data.toString());
                        };
                        _this._socket.onclose = function (_a) {
                            var wasClean = _a.wasClean, code = _a.code, reason = _a.reason;
                            clearInterval(_this._pingCheckTimer);
                            clearTimeout(_this._pingTimeoutTimer);
                            _this._socket = undefined;
                            _this._connected = false;
                            _this._connecting = false;
                            var wasInitialConnect = _this._initialConnect;
                            _this._initialConnect = false;
                            if (!wasClean) {
                                if (_this._manualDisconnect) {
                                    _this._manualDisconnect = false;
                                }
                                else {
                                    // tslint:disable-next-line:no-console
                                    console.error("PubSub connection unexpectedly closed: [" + code + "] " + reason);
                                    if (wasInitialConnect) {
                                        reject();
                                    }
                                    if (!_this._retryDelayGenerator) {
                                        _this._retryDelayGenerator = PubSubClient._getReconnectWaitTime();
                                    }
                                    var delay = _this._retryDelayGenerator.next().value;
                                    // tslint:disable-next-line:no-console
                                    console.log("Reconnecting in " + delay + " seconds");
                                    _this._retryTimer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        return [2 /*return*/, this.connect()];
                                    }); }); }, delay * 1000);
                                }
                            }
                        };
                    })];
            });
        });
    };
    PubSubClient.prototype._receiveMessage = function (dataStr) {
        var data = JSON.parse(dataStr);
        // tslint:disable-next-line:no-console
        console.log('>', data);
        switch (data.type) {
            case 'PONG': {
                this.emit(this._onPong);
                break;
            }
            case 'RECONNECT': {
                // tslint:disable-next-line:no-floating-promises
                this._reconnect();
                break;
            }
            case 'RESPONSE': {
                this.emit(this._onResponse, data.nonce, data.error);
                break;
            }
            case 'MESSAGE': {
                this.emit(this.onMessage, data.data.topic, JSON.parse(data.data.message));
                break;
            }
            default: {
                // tslint:disable-next-line:no-any
                console.warn("PubSub connection received unexpected message type: " + data.type);
            }
        }
    };
    PubSubClient.prototype._sendPacket = function (data) {
        // tslint:disable-next-line:no-console
        console.log('<', data);
        if (this._socket && this._connected) {
            this._socket.send(JSON.stringify(data));
        }
    };
    PubSubClient.prototype._pingCheck = function () {
        var _this = this;
        var pongListener = this._onPong(function () {
            clearTimeout(_this._pingTimeoutTimer);
            _this.removeListener(pongListener);
        });
        this._pingTimeoutTimer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.removeListener(pongListener);
                return [2 /*return*/, this._reconnect()];
            });
        }); }, 10000);
        this._sendPacket({ type: 'PING' });
    };
    PubSubClient.prototype._disconnect = function () {
        clearInterval(this._retryTimer);
        this._retryDelayGenerator = undefined;
        if (this._socket) {
            this._manualDisconnect = true;
            this._socket.close();
        }
    };
    PubSubClient.prototype._reconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._disconnect();
                        return [4 /*yield*/, this.connect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(PubSubClient.prototype, "isConnecting", {
        get: function () {
            return this._connecting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubClient.prototype, "isConnected", {
        get: function () {
            return this._connected;
        },
        enumerable: true,
        configurable: true
    });
    PubSubClient.prototype._startPingCheckTimer = function () {
        var _this = this;
        clearInterval(this._pingCheckTimer);
        this._pingCheckTimer = setInterval(function () { return _this._pingCheck(); }, 60000);
    };
    // yes, this is just fibonacci with a limit
    PubSubClient._getReconnectWaitTime = function () {
        var current, next, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    current = 0;
                    next = 1;
                    _b.label = 1;
                case 1:
                    if (!(current < 120)) return [3 /*break*/, 3];
                    return [4 /*yield*/, current];
                case 2:
                    _b.sent();
                    _a = [next, current + next], current = _a[0], next = _a[1];
                    return [3 /*break*/, 1];
                case 3:
                    if (!true) return [3 /*break*/, 5];
                    return [4 /*yield*/, 120];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 3];
                case 5: return [2 /*return*/];
            }
        });
    };
    return PubSubClient;
}(TypedEventEmitter_1.EventEmitter));
exports.default = PubSubClient;
//# sourceMappingURL=PubSubClient.js.map