import { Client as IRCClient } from 'ircv3';
import { Listener } from 'ircv3/lib/TypedEventEmitter';
import ChatSubInfo, { ChatSubGiftInfo } from './ChatSubInfo';
import UserNotice from './Capabilities/TwitchCommands/MessageTypes/UserNotice';
import Whisper from './Capabilities/TwitchCommands/MessageTypes/Whisper';
import Twitch from '../';
import TwitchPrivateMessage from './StandardCommands/PrivateMessage';
export default class ChatClient extends IRCClient {
    private static readonly HOST_MESSAGE_REGEX;
    _twitchClient: Twitch;
    onTimeout: (handler: (channel: string, user: string, reason: string, duration: number) => void) => Listener;
    onBan: (handler: (channel: string, user: string, reason: string) => void) => Listener;
    onChatClear: (handler: (channel: string) => void) => Listener;
    onEmoteOnly: (handler: (channel: string, enabled: boolean) => void) => Listener;
    onFollowersOnly: (handler: (channel: string, enabled: boolean, delay?: number) => void) => Listener;
    onHost: (handler: (channel: string, target: string, viewers?: number) => void) => Listener;
    onHosted: (handler: (channel: string, byChannel: string, auto: boolean, viewers?: number) => void) => Listener;
    onHostsRemaining: (handler: (channel: string, numberOfHosts: number) => void) => Listener;
    onJoin: (handler: (channel: string, user: string) => void) => Listener;
    onPart: (handler: (channel: string, user: string) => void) => Listener;
    onR9k: (handler: (channel: string, enabled: boolean) => void) => Listener;
    onUnhost: (handler: (channel: string) => void) => Listener;
    onSlow: (handler: (channel: string, enabled: boolean, delay?: number) => void) => Listener;
    onSubsOnly: (handler: (channel: string, enabled: boolean) => void) => Listener;
    onSub: (handler: (channel: string, user: string, subInfo: ChatSubInfo, msg: UserNotice) => void) => Listener;
    onResub: (handler: (channel: string, user: string, subInfo: ChatSubInfo, msg: UserNotice) => void) => Listener;
    onSubGift: (handler: (channel: string, user: string, subInfo: ChatSubGiftInfo, msg: UserNotice) => void) => Listener;
    onWhisper: (handler: (user: string, message: string, msg: Whisper) => void) => Listener;
    onPrivmsg: (handler: (target: string, user: string, message: string, msg: TwitchPrivateMessage) => void) => Listener;
    private readonly _onBanResult;
    private readonly _onTimeoutResult;
    private readonly _onUnbanResult;
    private readonly _onColorResult;
    private readonly _onCommercialResult;
    private readonly _onEmoteOnlyResult;
    private readonly _onEmoteOnlyOffResult;
    private readonly _onFollowersOnlyResult;
    private readonly _onFollowersOnlyOffResult;
    private readonly _onHostResult;
    private readonly _onUnhostResult;
    private readonly _onModResult;
    private readonly _onUnmodResult;
    private readonly _onModsResult;
    private readonly _onJoinResult;
    private readonly _onR9kResult;
    private readonly _onR9kOffResult;
    private readonly _onSlowResult;
    private readonly _onSlowOffResult;
    private readonly _onSubsOnlyResult;
    private readonly _onSubsOnlyOffResult;
    constructor(username: string, token: string, twitchClient: Twitch, debugLevel?: number);
    host(target: string, channel?: string): Promise<void>;
    unhost(channel?: string): Promise<void>;
    unhostOutside(channel?: string): void;
    protected registerCoreMessageTypes(): void;
}
