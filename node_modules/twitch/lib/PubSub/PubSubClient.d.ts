import { EventEmitter, Listener } from 'ircv3/lib/TypedEventEmitter';
import { PubSubOutgoingPacket } from './PubSubPacket';
import { PubSubMessageData } from './Messages/PubSubMessage';
export default class PubSubClient extends EventEmitter {
    private _socket?;
    private _connecting;
    private _connected;
    private _manualDisconnect;
    private _initialConnect;
    private _pingCheckTimer;
    private _pingTimeoutTimer;
    private _retryTimer;
    private _retryDelayGenerator?;
    private readonly _onPong;
    private readonly _onResponse;
    readonly onMessage: (handler: (topic: string, message: PubSubMessageData) => void) => Listener;
    listen(topics: string | string[], authToken?: string): Promise<void>;
    unlisten(topics: string | string[]): Promise<void>;
    private _sendNonced<T>(packet);
    connect(): Promise<void>;
    private _receiveMessage(dataStr);
    protected _sendPacket(data: PubSubOutgoingPacket): void;
    private _pingCheck();
    private _disconnect();
    private _reconnect();
    protected readonly isConnecting: boolean;
    protected readonly isConnected: boolean;
    private _startPingCheckTimer();
    private static _getReconnectWaitTime();
}
