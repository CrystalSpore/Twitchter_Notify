"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var defaults = require("defaults");
var request = require("request-promise-native");
var Decorators_1 = require("./Toolkit/Decorators");
var TokenInfo_1 = require("./API/TokenInfo");
var CheermoteList_1 = require("./API/Bits/CheermoteList");
var StaticAuthProvider_1 = require("./Auth/StaticAuthProvider");
exports.StaticAuthProvider = StaticAuthProvider_1.default;
var BitsAPI_1 = require("./API/Bits/BitsAPI");
var ChannelAPI_1 = require("./API/Channel/ChannelAPI");
var HelixAPIGroup_1 = require("./API/Helix/HelixAPIGroup");
var SearchAPI_1 = require("./API/Search/SearchAPI");
var StreamAPI_1 = require("./API/Stream/StreamAPI");
var UnsupportedAPI_1 = require("./API/Unsupported/UnsupportedAPI");
var UserAPI_1 = require("./API/User/UserAPI");
var ChatClient_1 = require("./Chat/ChatClient");
exports.ChatClient = ChatClient_1.default;
var PubSubClient_1 = require("./PubSub/PubSubClient");
exports.PubSubClient = PubSubClient_1.default;
var AccessToken_1 = require("./API/AccessToken");
var RefreshableAuthProvider_1 = require("./Auth/RefreshableAuthProvider");
exports.RefreshableAuthProvider = RefreshableAuthProvider_1.default;
var SingleUserPubSubClient_1 = require("./PubSub/SingleUserPubSubClient");
var Twitch = /** @class */ (function () {
    function Twitch(config) {
        this._chatClients = new Map;
        this._pubSubClients = new Map;
        if (!config.authProvider) {
            throw new Error('No auth provider given');
        }
        this._config = defaults(config, {
            preAuth: false,
            initialScopes: [],
            cheermotes: {
                defaultBackground: CheermoteList_1.CheermoteBackground.dark,
                defaultState: CheermoteList_1.CheermoteState.animated,
                defaultScale: CheermoteList_1.CheermoteScale.x1
            }
        });
        if (this._config.preAuth) {
            // tslint:disable-next-line:no-floating-promises
            this._config.authProvider.getAccessToken(this._config.initialScopes || []);
        }
    }
    Twitch_1 = Twitch;
    Twitch.withCredentials = function (clientId, accessToken, refreshConfig, config) {
        if (config === void 0) { config = {}; }
        if (refreshConfig) {
            return new this(__assign({}, config, { authProvider: new RefreshableAuthProvider_1.default(new StaticAuthProvider_1.default(clientId, accessToken), refreshConfig) }));
        }
        else {
            return new this(__assign({}, config, { authProvider: new StaticAuthProvider_1.default(clientId, accessToken) }));
        }
    };
    Twitch.prototype.getTokenInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiCall({ url: '/' })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new TokenInfo_1.default(data.token)];
                }
            });
        });
    };
    Twitch.getTokenInfo = function (clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiCall({ url: '/' }, clientId, accessToken)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new TokenInfo_1.default(data.token)];
                }
            });
        });
    };
    // tslint:disable-next-line:no-any
    Twitch.prototype.apiCall = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._config.authProvider.getAccessToken(options.scope ? [options.scope] : [])];
                    case 1:
                        accessToken = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 8]);
                        return [4 /*yield*/, Twitch_1.apiCall(options, this._config.authProvider.clientId, accessToken)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_1 = _a.sent();
                        if (!(e_1.response && e_1.response.status === 401 && this._config.authProvider instanceof RefreshableAuthProvider_1.default)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this._config.authProvider.refresh()];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this._config.authProvider.getAccessToken(options.scope ? [options.scope] : [])];
                    case 6:
                        accessToken = _a.sent();
                        return [2 /*return*/, Twitch_1.apiCall(options, this._config.authProvider.clientId, accessToken)];
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    Twitch._getUrl = function (url, type) {
        type = type || 'kraken';
        switch (type) {
            case 'kraken':
            case 'helix':
                return "https://api.twitch.tv/" + type + "/" + url.replace(/^\//, '');
            case 'custom':
                return url;
            default:
                return url; // wat
        }
    };
    // tslint:disable-next-line:no-any
    Twitch.apiCall = function (options, clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            var requestOptions;
            return __generator(this, function (_a) {
                requestOptions = {
                    url: this._getUrl(options.url, options.type),
                    method: options.method,
                    headers: {
                        Accept: "application/vnd.twitchtv.v" + (options.version || 5) + "+json"
                    },
                    qs: options.query,
                    qsStringifyOptions: {
                        arrayFormat: 'repeat'
                    },
                    form: options.body,
                    json: true,
                    gzip: true
                };
                if (options.body) {
                    requestOptions.form = options.body;
                }
                else if (options.jsonBody) {
                    requestOptions.body = options.jsonBody;
                }
                if (clientId) {
                    requestOptions.headers['Client-ID'] = clientId;
                }
                if (accessToken) {
                    requestOptions.headers.Authorization = (options.type === 'helix' ? 'Bearer' : 'OAuth') + " " + accessToken;
                }
                return [2 /*return*/, request(requestOptions)];
            });
        });
    };
    Twitch.prototype.getChatClient = function (identifier, debugLevel) {
        if (identifier === void 0) { identifier = 'default'; }
        if (debugLevel === void 0) { debugLevel = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var token, tokenInfo, newClient;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this._chatClients.has(identifier)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._config.authProvider.getAccessToken(['chat_login'])];
                    case 1:
                        token = _a.sent();
                        return [4 /*yield*/, this.getTokenInfo()];
                    case 2:
                        tokenInfo = _a.sent();
                        if (tokenInfo.valid && tokenInfo.userName) {
                            newClient = new ChatClient_1.default(tokenInfo.userName, token, this, debugLevel);
                            this._chatClients.set(identifier, newClient);
                            return [2 /*return*/, newClient];
                        }
                        throw new Error('invalid token when trying to connect to chat');
                    case 3: return [2 /*return*/, this._chatClients.get(identifier)];
                }
            });
        });
    };
    Twitch.prototype.getPubSubClient = function (identifier) {
        if (identifier === void 0) { identifier = 'default'; }
        if (!this._pubSubClients.has(identifier)) {
            var newClient = new SingleUserPubSubClient_1.default(this);
            this._pubSubClients.set(identifier, newClient);
            return newClient;
        }
        return this._pubSubClients.get(identifier);
    };
    Twitch.getAccessToken = function (clientId, clientSecret, code, redirectUri) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = AccessToken_1.default.bind;
                        return [4 /*yield*/, this.apiCall({
                                url: 'oauth2/token',
                                method: 'POST',
                                query: {
                                    grant_type: 'authorization_code',
                                    client_id: clientId,
                                    client_secret: clientSecret,
                                    code: code,
                                    redirect_uri: redirectUri
                                }
                            })];
                    case 1: return [2 /*return*/, new (_a.apply(AccessToken_1.default, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    Twitch.refreshAccessToken = function (clientId, clientSecret, refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = AccessToken_1.default.bind;
                        return [4 /*yield*/, this.apiCall({
                                url: 'oauth2/token',
                                method: 'POST',
                                query: {
                                    grant_type: 'refresh_token',
                                    client_id: clientId,
                                    client_secret: clientSecret,
                                    refresh_token: refreshToken
                                }
                            })];
                    case 1: return [2 /*return*/, new (_a.apply(AccessToken_1.default, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    Object.defineProperty(Twitch.prototype, "bits", {
        get: function () {
            return new BitsAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Twitch.prototype, "channels", {
        get: function () {
            return new ChannelAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Twitch.prototype, "search", {
        get: function () {
            return new SearchAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Twitch.prototype, "streams", {
        get: function () {
            return new StreamAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Twitch.prototype, "users", {
        get: function () {
            return new UserAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Twitch.prototype, "helix", {
        get: function () {
            return new HelixAPIGroup_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Twitch.prototype, "unsupported", {
        get: function () {
            return new UnsupportedAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "bits", null);
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "channels", null);
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "search", null);
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "streams", null);
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "users", null);
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "helix", null);
    __decorate([
        Decorators_1.CachedGetter()
    ], Twitch.prototype, "unsupported", null);
    Twitch = Twitch_1 = __decorate([
        Decorators_1.Cacheable
    ], Twitch);
    return Twitch;
    var Twitch_1;
}());
exports.default = Twitch;
//# sourceMappingURL=index.js.map