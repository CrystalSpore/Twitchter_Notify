"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketConnection_1 = require("./Connection/WebSocketConnection");
var DirectConnection_1 = require("./Connection/DirectConnection");
var StringTools_1 = require("./Toolkit/StringTools");
var Message_1 = require("./Message/Message");
var ObjectTools_1 = require("./Toolkit/ObjectTools");
var MessageCollector_1 = require("./Message/MessageCollector");
var MessageTypes = require("./Message/MessageTypes");
var CoreCapabilities = require("./Capability/CoreCapabilities");
var randomstring = require("randomstring");
var TypedEventEmitter_1 = require("./TypedEventEmitter");
var Commands_1 = require("./Message/MessageTypes/Commands");
var Numerics_1 = require("./Message/MessageTypes/Numerics");
var ClientQuit_1 = require("./Message/MessageTypes/Commands/ClientQuit");
var Client = /** @class */ (function (_super) {
    __extends(Client, _super);
    function Client(_a) {
        var connection = _a.connection, webSocket = _a.webSocket, channelTypes = _a.channelTypes, debugLevel = _a.debugLevel;
        var _this = _super.call(this) || this;
        _this._registered = false;
        _this._supportsCapabilities = true;
        _this._events = new Map();
        _this._registeredMessageTypes = new Map;
        // emitted events
        _this.onConnect = _this.registerEvent();
        _this.onRegister = _this.registerEvent();
        _this.onDisconnect = _this.registerEvent();
        _this.onPrivmsg = _this.registerEvent();
        _this.onAction = _this.registerEvent();
        _this.onNotice = _this.registerEvent();
        _this.onCtcp = _this.registerEvent();
        _this.onCtcpReply = _this.registerEvent();
        // sane defaults based on RFC 1459
        _this._channelTypes = '#&';
        _this._supportedUserModes = 'iwso';
        _this._supportedChannelModes = {
            list: 'b',
            alwaysWithParam: 'ovk',
            paramWhenSet: 'l',
            noParam: 'imnpst'
        };
        _this._supportedFeatures = {};
        _this._collectors = [];
        _this._clientCapabilities = new Map;
        _this._serverCapabilities = new Map;
        _this._negotiatedCapabilities = new Map;
        _this._pingOnInactivity = connection.pingOnInactivity || 60;
        _this._pingTimeout = connection.pingTimeout || 10;
        _this._debugLevel = debugLevel || 0;
        if (webSocket) {
            _this._connection = new WebSocketConnection_1.default(connection);
        }
        else {
            _this._connection = new DirectConnection_1.default(connection);
        }
        _this.registerCoreMessageTypes();
        try {
            for (var _b = __values(Object.values(CoreCapabilities)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cap = _c.value;
                _this.registerCapability(cap);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this._connection.on('connect', function () {
            _this.sendMessageAndCaptureReply(Commands_1.CapabilityNegotiation, {
                command: 'LS',
                version: '302'
            }).then(function (capReply) {
                if (!capReply.length || !(capReply[0] instanceof Commands_1.CapabilityNegotiation)) {
                    return;
                }
                _this._supportsCapabilities = true;
                var capLists = capReply.map(function (line) { return ObjectTools_1.default.fromArray(line.params.capabilities.split(' '), function (part) {
                    if (!part) {
                        return {};
                    }
                    var _a = __read(part.split('=', 2), 2), cap = _a[0], param = _a[1];
                    return _b = {},
                        _b[cap] = {
                            name: cap,
                            param: param || true
                        },
                        _b;
                    var _b;
                }); });
                _this._serverCapabilities = new Map(Object.entries(Object.assign.apply(Object, __spread([{}], capLists))));
                var capabilitiesToNegotiate = capLists.map(function (list) {
                    var capNames = Object.keys(list);
                    return Array.from(_this._clientCapabilities.entries())
                        .filter(function (_a) {
                        var _b = __read(_a, 1), name = _b[0];
                        return capNames.includes(name);
                    })
                        .map(function (_a) {
                        var _b = __read(_a, 2), cap = _b[1];
                        return cap;
                    });
                });
                _this._negotiateCapabilityBatch(capabilitiesToNegotiate).then(function () {
                    _this.sendMessage(Commands_1.CapabilityNegotiation, { command: 'END' });
                    _this._registered = true;
                    _this.emit(_this.onRegister);
                });
            });
            if (connection.password) {
                _this.sendMessage(Commands_1.Password, { password: connection.password });
            }
            _this.sendMessage(Commands_1.NickChange, { nick: _this._nick });
            _this.sendMessage(Commands_1.UserRegistration, {
                user: _this._userName,
                mode: '8',
                unused: '*',
                realName: _this._realName
            });
        });
        _this._connection.on('lineReceived', function (line) {
            var timestamp = (new Date()).toLocaleString();
            // tslint:disable:no-console
            if (_this._debugLevel >= 1) {
                console.log("[" + timestamp + "] > recv: `" + line + "`");
            }
            var parsedMessage = Message_1.default.parse(line, _this);
            if (_this._debugLevel >= 2) {
                console.log("[" + timestamp + "] > recv parsed:", parsedMessage);
            }
            _this._startPingCheckTimer();
            _this.handleEvents(parsedMessage);
            // tslint:enable:no-console
        });
        _this.onMessage(Commands_1.CapabilityNegotiation, function (_a) {
            var _b = _a.params, command = _b.command, capabilities = _b.capabilities;
            // tslint:disable-next-line:switch-default
            switch (command.toUpperCase()) {
                case 'NEW': {
                    var capList = ObjectTools_1.default.fromArray(capabilities.split(' '), function (part) {
                        if (!part) {
                            return {};
                        }
                        var _a = __read(part.split('=', 2), 2), cap = _a[0], param = _a[1];
                        return _b = {},
                            _b[cap] = {
                                name: cap,
                                param: param || true
                            },
                            _b;
                        var _b;
                    });
                    try {
                        for (var _c = __values(Object.entries(capList)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var _e = __read(_d.value, 2), name_1 = _e[0], cap = _e[1];
                            _this._serverCapabilities.set(name_1, cap);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    var capNames_1 = Object.keys(capList);
                    _this._negotiateCapabilities(Array.from(_this._clientCapabilities.entries())
                        .filter(function (_a) {
                        var _b = __read(_a, 1), name = _b[0];
                        return capNames_1.includes(name);
                    })
                        .map(function (_a) {
                        var _b = __read(_a, 2), cap = _b[1];
                        return cap;
                    }));
                    break;
                }
                case 'DEL': {
                    try {
                        for (var _g = __values(capabilities.split(' ')), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var cap = _h.value;
                            _this._serverCapabilities.delete(cap);
                            _this._negotiatedCapabilities.delete(cap);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_j = _g.return)) _j.call(_g);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    break;
                }
            }
            var e_2, _f, e_3, _j;
        });
        _this.onMessage(Commands_1.Ping, function (_a) {
            var message = _a.params.message;
            _this.sendMessage(Commands_1.Pong, { message: message });
        });
        _this.onMessage(Numerics_1.Reply001Welcome, function () {
            if (!_this._supportsCapabilities) {
                _this._registered = true;
                _this.emit(_this.onRegister);
            }
        });
        _this.onMessage(Numerics_1.Reply004ServerInfo, function (_a) {
            var userModes = _a.params.userModes;
            if (userModes) {
                _this._supportedUserModes = userModes;
            }
        });
        _this.onMessage(Numerics_1.Reply005ISupport, function (_a) {
            var supports = _a.params.supports;
            _this._supportedFeatures = Object.assign(_this._supportedFeatures, ObjectTools_1.default.fromArray(supports.split(' '), function (part) {
                var _a = __read(part.split('=', 2), 2), support = _a[0], param = _a[1];
                return _b = {}, _b[support] = param || true, _b;
                var _b;
            }));
        });
        _this.onMessage(Numerics_1.Error462AlreadyRegistered, function () {
            // what, I thought we are not registered yet?
            if (!_this._registered) {
                // screw this, we are now.
                _this._registered = true;
                _this.emit(_this.onRegister);
            }
        });
        _this.onMessage(Commands_1.PrivateMessage, function (msg) {
            var _a = msg.params, target = _a.target, message = _a.message;
            var ctcpMessage = StringTools_1.decodeCtcp(message);
            var nick = msg.prefix && msg.prefix.nick;
            if (ctcpMessage) {
                if (ctcpMessage.command === 'ACTION') {
                    _this.emit(_this.onAction, target, nick, ctcpMessage.params, msg);
                }
                else {
                    _this.emit(_this.onCtcp, target, nick, ctcpMessage.command, ctcpMessage.params, msg);
                }
            }
            _this.emit(_this.onPrivmsg, target, nick, message, msg);
        });
        _this.onMessage(Commands_1.Notice, function (msg) {
            var _a = msg.params, target = _a.target, message = _a.message;
            var ctcpMessage = StringTools_1.decodeCtcp(message);
            var nick = msg.prefix && msg.prefix.nick;
            if (ctcpMessage) {
                _this.emit(_this.onCtcpReply, target, nick, ctcpMessage.command, ctcpMessage.params, msg);
            }
            _this.emit(_this.onNotice, target, nick, message, msg);
        });
        _this.onRegister(function () { return _this._startPingCheckTimer(); });
        _this._connection.on('disconnect', function (reason) {
            _this._registered = false;
            clearTimeout(_this._pingCheckTimer);
            clearTimeout(_this._pingTimeoutTimer);
            _this.emit(_this.onDisconnect, reason);
        });
        _this._nick = connection.nick;
        _this._userName = connection.userName || connection.nick;
        _this._realName = connection.realName || connection.nick;
        if (channelTypes) {
            _this._channelTypes = channelTypes;
        }
        return _this;
        var e_1, _d;
    }
    Client.prototype.pingCheck = function () {
        var _this = this;
        var token = randomstring.generate(16);
        var handler = this.onMessage(Commands_1.Pong, function (_a) {
            var message = _a.params.message;
            if (message === token) {
                clearTimeout(_this._pingTimeoutTimer);
                _this.removeMessageListener(handler);
            }
        });
        this._pingTimeoutTimer = setTimeout(function () {
            _this.removeMessageListener(handler);
            _this.reconnect('Ping timeout');
        }, this._pingTimeout * 1000);
        this.sendMessage(Commands_1.Ping, { message: token });
    };
    Client.prototype.reconnect = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.quit(message)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.connect()];
                }
            });
        });
    };
    Client.prototype.registerMessageType = function (cls) {
        if (cls.COMMAND !== '') {
            this._registeredMessageTypes.set(cls.COMMAND.toUpperCase(), cls);
        }
    };
    Client.prototype.knowsCommand = function (command) {
        return this._registeredMessageTypes.has(command.toUpperCase());
    };
    Client.prototype.getCommandClass = function (command) {
        return this._registeredMessageTypes.get(command.toUpperCase());
    };
    Client.prototype.registerCoreMessageTypes = function () {
        var _this = this;
        ObjectTools_1.default.forEach(MessageTypes.Commands, function (type) {
            _this.registerMessageType(type);
        });
        ObjectTools_1.default.forEach(MessageTypes.Numerics, function (type) {
            _this.registerMessageType(type);
        });
    };
    Client.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._supportsCapabilities = false;
                        this._negotiatedCapabilities = new Map;
                        return [4 /*yield*/, this._connection.connect()];
                    case 1:
                        _a.sent();
                        this.emit(this.onConnect);
                        return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype._negotiateCapabilityBatch = function (capabilities) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(capabilities.filter(function (list) { return list.length; }).map(function (capList) { return _this._negotiateCapabilities(capList); }))];
            });
        });
    };
    Client.prototype._negotiateCapabilities = function (capList) {
        return __awaiter(this, void 0, void 0, function () {
            var mappedCapList, messages, capReply, newCapNames, newNegotiatedCaps, newNegotiatedCaps_1, newNegotiatedCaps_1_1, newCap, mergedCap, e_4, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mappedCapList = ObjectTools_1.default.fromArray(capList, function (cap) {
                            return (_a = {}, _a[cap.name] = cap, _a);
                            var _a;
                        });
                        return [4 /*yield*/, this.sendMessageAndCaptureReply(Commands_1.CapabilityNegotiation, {
                                command: 'REQ',
                                capabilities: capList.map(function (cap) { return cap.name; }).join(' ')
                            })];
                    case 1:
                        messages = _b.sent();
                        capReply = messages.shift();
                        if (!capReply) {
                            throw new Error('capability negotiation failed unexpectedly without any reply');
                        }
                        if (!(capReply instanceof Commands_1.CapabilityNegotiation)) {
                            throw new Error("capability negotiation failed unexpectedly with \"" + capReply.command + "\" command");
                        }
                        if (capReply.params.command === 'ACK') {
                            newCapNames = capReply.params.capabilities.split(' ').filter(function (c) { return c; });
                            newNegotiatedCaps = newCapNames.map(function (capName) { return mappedCapList[capName]; });
                            try {
                                for (newNegotiatedCaps_1 = __values(newNegotiatedCaps), newNegotiatedCaps_1_1 = newNegotiatedCaps_1.next(); !newNegotiatedCaps_1_1.done; newNegotiatedCaps_1_1 = newNegotiatedCaps_1.next()) {
                                    newCap = newNegotiatedCaps_1_1.value;
                                    mergedCap = this._clientCapabilities.get(newCap.name);
                                    mergedCap.param = newCap.param;
                                    this._negotiatedCapabilities.set(mergedCap.name, mergedCap);
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (newNegotiatedCaps_1_1 && !newNegotiatedCaps_1_1.done && (_a = newNegotiatedCaps_1.return)) _a.call(newNegotiatedCaps_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            return [2 /*return*/, newNegotiatedCaps];
                        }
                        else {
                            return [2 /*return*/, new Error('capabilities failed to negotiate')];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.registerCapability = function (cap) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, messageType, e_5, _c;
            return __generator(this, function (_d) {
                this._clientCapabilities.set(cap.name, cap);
                if (cap.messageTypes) {
                    try {
                        for (_a = __values(cap.messageTypes), _b = _a.next(); !_b.done; _b = _a.next()) {
                            messageType = _b.value;
                            this.registerMessageType(messageType);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                if (this._serverCapabilities.has(cap.name)) {
                    return [2 /*return*/, this._negotiateCapabilities([cap])];
                }
                return [2 /*return*/, []];
            });
        });
    };
    Client.prototype.send = function (message) {
        var line = message.toString();
        var timestamp = (new Date()).toLocaleString();
        if (this._debugLevel >= 1) {
            // tslint:disable-next-line:no-console
            console.log("[" + timestamp + "] < send: `" + line + "`");
        }
        this._connection.sendLine(line);
    };
    Client.prototype.onMessage = function (type, handler, handlerName) {
        var commandName = typeof type === 'string' ? type : type.COMMAND;
        if (!this._events.has(commandName)) {
            this._events.set(commandName, new Map);
        }
        var handlerList = this._events.get(commandName);
        if (!handlerName) {
            do {
                handlerName = commandName + ":" + StringTools_1.padLeft(Math.random() * 10000, 4, '0');
            } while (handlerList.has(handlerName));
        }
        handlerList.set(handlerName, handler);
        return handlerName;
    };
    Client.prototype.removeMessageListener = function (handlerName) {
        var _a = __read(handlerName.split(':'), 1), commandName = _a[0];
        if (!this._events.has(commandName)) {
            return;
        }
        this._events.get(commandName).delete(handlerName);
    };
    Client.prototype.createMessage = function (type, params) {
        return type.create(this, params);
    };
    Client.prototype.sendMessage = function (type, params) {
        this.createMessage(type, params).send();
    };
    Client.prototype.sendMessageAndCaptureReply = function (type, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createMessage(type, params).sendAndCaptureReply()];
            });
        });
    };
    Object.defineProperty(Client.prototype, "channelTypes", {
        get: function () {
            return this._channelTypes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "supportedChannelModes", {
        get: function () {
            return this._supportedChannelModes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "isConnected", {
        get: function () {
            return this._connection.isConnected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "isConnecting", {
        get: function () {
            return this._connection.isConnecting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "isRegistered", {
        get: function () {
            return this._registered;
        },
        enumerable: true,
        configurable: true
    });
    Client.prototype.collect = function (originalMessage) {
        var types = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            types[_i - 1] = arguments[_i];
        }
        var collector = new (MessageCollector_1.default.bind.apply(MessageCollector_1.default, __spread([void 0, this, originalMessage], types)))();
        this._collectors.push(collector);
        return collector;
    };
    Client.prototype.stopCollect = function (collector) {
        this._collectors.splice(this._collectors.findIndex(function (value) { return value === collector; }), 1);
    };
    // convenience methods
    Client.prototype.join = function (channel, key) {
        this.sendMessage(Commands_1.ChannelJoin, { channel: channel, key: key });
    };
    Client.prototype.part = function (channel) {
        this.sendMessage(Commands_1.ChannelPart, { channel: channel });
    };
    Client.prototype.quit = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.sendMessage(ClientQuit_1.default, { message: message });
                        var handler = function () {
                            _this._connection.removeListener('disconnect', handler);
                            resolve();
                        };
                        _this._connection.addListener('disconnect', handler);
                        _this._connection.disconnect();
                    })];
            });
        });
    };
    // event helper
    Client.prototype.handleEvents = function (message) {
        this._collectors.some(function (collector) { return collector.collect(message); });
        var handlers = this._events.get(message.constructor.COMMAND);
        if (!handlers) {
            return;
        }
        try {
            for (var _a = __values(handlers.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var handler = _b.value;
                handler(message);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var e_6, _c;
    };
    Client.prototype._startPingCheckTimer = function () {
        var _this = this;
        clearTimeout(this._pingCheckTimer);
        this._pingCheckTimer = setTimeout(function () { return _this.pingCheck(); }, this._pingOnInactivity * 1000);
    };
    return Client;
}(TypedEventEmitter_1.EventEmitter));
exports.default = Client;
//# sourceMappingURL=Client.js.map